# Copyright (C) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

source_set("lib") {
  sources = [
    "filter/clock_filter.cpp",
    "filter/clock_filter.h",
    "filter/cpu_filter.cpp",
    "filter/event_filter.cpp",
    "filter/event_filter.h",
    "filter/filter_base.cpp",
    "filter/filter_base.h",
    "filter/filter_filter.cpp",
    "filter/filter_filter.h",
    "filter/measure_filter.cpp",
    "filter/measure_filter.h",
    "filter/process_filter.cpp",
    "filter/process_filter.h",
    "filter/slice_filter.cpp",
    "filter/slice_filter.h",
    "parser/bytrace_parser.cpp",
    "parser/bytrace_parser.h",
    "parser/common_types.h",
    "parser/event_parser.cpp",
    "parser/event_parser.h",
    "parser/thread_state.cpp",
    "parser/thread_state.h",
    "table/bound_table.cpp",
    "table/cpu_measure_filter_table.cpp",
    "table/cpu_measure_filter_table.h",
    "table/data_dict_table.cpp",
    "table/data_dict_table.h",
    "table/filter_table.cpp",
    "table/filter_table.h",
    "table/instants_table.cpp",
    "table/instants_table.h",
    "table/internal_slice_table.cpp",
    "table/internal_slice_table.h",
    "table/internal_thread.cpp",
    "table/measure_filter_table.cpp",
    "table/measure_filter_table.h",
    "table/measure_table.cpp",
    "table/measure_table.h",
    "table/process_filter_table.cpp",
    "table/process_filter_table.h",
    "table/process_measure_filter_table.cpp",
    "table/process_measure_filter_table.h",
    "table/process_table.cpp",
    "table/process_table.h",
    "table/raw_table.cpp",
    "table/raw_table.h",
    "table/sched_slice_table.cpp",
    "table/sched_slice_table.h",
    "table/table_base.cpp",
    "table/table_base.h",
    "table/thread_filter_table.cpp",
    "table/thread_filter_table.h",
    "table/thread_state_table.cpp",
    "table/thread_state_table.h",
    "table/thread_table.cpp",
    "table/thread_table.h",
    "trace_data/trace_data_cache.cpp",
    "trace_data/trace_data_cache.h",
    "trace_data/trace_data_cache_base.cpp",
    "trace_data/trace_data_cache_base.h",
    "trace_data/trace_data_cache_reader.cpp",
    "trace_data/trace_data_cache_reader.h",
    "trace_data/trace_data_cache_writer.cpp",
    "trace_data/trace_data_cache_writer.h",
    "trace_data/trace_data_db.cpp",
    "trace_data/trace_data_db.h",
    "trace_data/trace_stdtype.cpp",
    "trace_data/trace_stdtype.h",
    "trace_streamer.cpp",
    "trace_streamer.h",
    "trace_streamer_filters.cpp",
    "trace_streamer_filters.h",
  ]
  include_dirs = [
    "//src/base",
    "//src",
    "//src/filter",
    "//src/table",
    "//src/trace_data",
  ]
  deps = [
    "../../buildtools:third_party_sqlite",
    "../../gn:default_deps",
    "base",
  ]
  public_deps = [ "//src/base:base" ]
}

executable("trace_streamer") {
  deps = [
    ":lib",
    "../../gn:default_deps",
    "base",
    "//src/base:base",
  ]
  sources = [ "main.cpp" ]
}
